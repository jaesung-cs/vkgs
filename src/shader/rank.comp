#version 460

layout(local_size_x = 256) in;

layout(set = 0, binding = 0) uniform Camera {
  mat4 projection;
  mat4 view;
  vec3 camera_position;
  uvec2 screen_size;  // (width, height)
};

layout(std430, push_constant) uniform PushConstants {
  mat4 model;
  uint point_count;
};

layout(std430, set = 1, binding = 0) readonly buffer GaussianPosition {
  float gaussian_position[];  // (N, 3)
};

layout(std430, set = 2, binding = 0) buffer VisiblePointCount { uint visible_point_count; };

layout(std430, set = 2, binding = 1) writeonly buffer Key { uint key[]; };

layout(std430, set = 2, binding = 2) writeonly buffer Index { uint index[]; };

void main() {
  uint id = gl_GlobalInvocationID.x;
  if (id >= point_count) return;

  vec4 pos = vec4(gaussian_position[id * 3 + 0], gaussian_position[id * 3 + 1], gaussian_position[id * 3 + 2], 1.f);
  pos = projection * view * model * pos;
  pos = pos / pos.w;
  float depth = pos.z;

  // valid only when center is inside NDC clip space.
  if (abs(pos.x) <= 1.f && abs(pos.y) <= 1.f && pos.z >= 0.f && pos.z <= 1.f) {
    uint instance_index = atomicAdd(visible_point_count, 1);
    key[instance_index] = floatBitsToUint(1.f - depth);
    index[instance_index] = id;
  }
}
